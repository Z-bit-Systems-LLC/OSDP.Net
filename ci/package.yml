steps:
  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      packageType: 'sdk'
      version: '8.x'
      
  - task: PowerShell@2
    displayName: 'Get current version'
    inputs:
      targetType: 'inline'
      script: |
        # Configure git for the build agent
        git config --global user.email "byteme@bytedreamer.com"
        git config --global user.name "Azure DevOps Build Agent"

        # Get current version
        $currentVersion = & "$(Build.SourcesDirectory)/scripts/Get-Version.ps1" -BuildPropsPath "$(Build.SourcesDirectory)/Directory.Build.props" -Format Simple
        Write-Host "Packaging version: $currentVersion"

        # Set pipeline variable for later use
        Write-Host "##vso[task.setvariable variable=PackageVersion]$currentVersion"

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: 'pack'
      arguments: '--configuration $(buildConfiguration)'
      packagesToPack: 'src/OSDP.Net/OSDP.Net.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'ACUConsole dotnet publish for osx-arm64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'src/ACUConsole/ACUConsole.csproj'
      arguments: '-r osx-arm64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/TestConsole/osx-arm64'
      zipAfterPublish: false
      modifyOutputPath: false

  - task: DotNetCoreCLI@2
    displayName: 'ACUConsole dotnet publish for win-x64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      projects: 'src/ACUConsole/ACUConsole.csproj'
      arguments: '-r win-x64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/TestConsole/win-x64'

  - task: DotNetCoreCLI@2
    displayName: 'ACUConsole dotnet publish for linux-x64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      projects: 'src/ACUConsole/ACUConsole.csproj'
      arguments: '-r linux-x64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/TestConsole/linux-x64'

  - task: DotNetCoreCLI@2
    displayName: 'ACUConsole dotnet publish for linux-arm64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      projects: 'src/ACUConsole/ACUConsole.csproj'
      arguments: '-r linux-arm64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/TestConsole/linux-arm64'

  - task: DotNetCoreCLI@2
    displayName: 'PDConsole dotnet publish for osx-arm64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'src/PDConsole/PDConsole.csproj'
      arguments: '-r osx-arm64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/PDConsole/osx-arm64'
      zipAfterPublish: false
      modifyOutputPath: false

  - task: DotNetCoreCLI@2
    displayName: 'PDConsole dotnet publish for win-x64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      projects: 'src/PDConsole/PDConsole.csproj'
      arguments: '-r win-x64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/PDConsole/win-x64'

  - task: DotNetCoreCLI@2
    displayName: 'PDConsole dotnet publish for linux-x64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      projects: 'src/PDConsole/PDConsole.csproj'
      arguments: '-r linux-x64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/PDConsole/linux-x64'

  - task: DotNetCoreCLI@2
    displayName: 'PDConsole dotnet publish for linux-arm64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      projects: 'src/PDConsole/PDConsole.csproj'
      arguments: '-r linux-arm64 --configuration $(BuildConfiguration) --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output $(Build.ArtifactStagingDirectory)/PDConsole/linux-arm64'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: PowerShell@2
    displayName: 'Tag build if Git tag'
    inputs:
      targetType: 'inline'
      script: |
        $sourceBranch = "$(Build.SourceBranch)"
        Write-Host "Source branch: $sourceBranch"

        if ($sourceBranch -like "refs/tags/*") {
          Write-Host "Build triggered by Git tag - adding 'release' build tag"
          Write-Host "##vso[build.addbuildtag]release"
        } else {
          Write-Host "Build not triggered by Git tag - skipping build tag"
        }
